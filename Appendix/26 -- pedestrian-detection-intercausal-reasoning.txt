from pomegranate import *

camera = DiscreteDistribution({'0': 0.6, '1': 0.4})
radar = DiscreteDistribution({'0': 0.5, '1': 0.5})
fog = ConditionalProbabilityTable(
        [['0', '0', 0.5],
         ['0', '1', 0.5],
         ['1', '0', 0.3],
         ['1', '1', 0.7]], [camera])
away = ConditionalProbabilityTable(
        [['0', '0', 0.2],
         ['0', '1', 0.8],
         ['1', '0', 0.6],
         ['1', '1', 0.4]], [radar])
detected = ConditionalProbabilityTable(
        [['0', '0', '0', 1.0],
         ['0', '0', '1', 0.0],
         ['0', '1', '0', 0.6],
         ['0', '1', '1', 0.4],
         ['1', '0', '0', 0.7],
         ['1', '0', '1', 0.3],
         ['1', '1', '0', 0.1],
         ['1', '1', '1', 0.9]], [camera, radar])
stopped = ConditionalProbabilityTable(
        [['0', '0', '0', 0.6],
         ['0', '0', '1', 0.4],
         ['0', '1', '0', 0.9],
         ['0', '1', '1', 0.1],
         ['1', '0', '0', 0.1],
         ['1', '0', '1', 0.9],
         ['1', '1', '0', 0.5],
         ['1', '1', '1', 0.5]], [detected, away])

s1 = Node(camera, name="camera")
s2 = Node(radar, name="radar")
s3 = Node(fog, name="fog")
s4 = Node(away, name="away")
s5 = Node(detected, name="detected")
s6 = Node(stopped, name="stopped")


model = BayesianNetwork("Pedestrian Detection Problem")
model.add_states(s1, s2, s3, s4, s5, s6)
model.add_edge(s1, s3)
model.add_edge(s1, s5)
model.add_edge(s2, s4)
model.add_edge(s2, s5)
model.add_edge(s5, s6)
model.add_edge(s4, s6)
model.bake()


### P(r1)
query = [None, '1', None, None, None, None]
pr1 = 0 
for j1 in range(2): 
    for j2 in range(2): 
        for j3 in range(2): 
            for j4 in range(2): 
                for j5 in range(2): 
                    pr1 += model.probability([[str(j1), '1', str(j2), str(j3), str(j4), str(j5)]])
print("P(r1): %s\n"%pr1)

### P(d1)
query = [None, None, None, None, '1', None]
pd1 = 0 
for j1 in range(2): 
    for j2 in range(2): 
        for j3 in range(2): 
            for j4 in range(2): 
                for j5 in range(2): 
                    pd1 += model.probability([[str(j1), str(j2), str(j3), str(j4), '1', str(j5)]])
print("P(d1): %s\n"%pd1)

#### P(r1,d1)
query = [None, '1', None, None, '1',  None]
pr1d1 = 0 
for j1 in range(2): 
    for j2 in range(2): 
        for j3 in range(2): 
            for j4 in range(2): 
                pr1d1 += model.probability([[str(j1), '1', str(j2), str(j3), '1', str(j4)]])
print("P(r1,d1): %s\n"%(pr1d1))

#### P(r1|d1)
print("P(r1|d1)): %s\n"%(pr1d1/pd1))

#### P(r1,d1,c1)
query = ['1', '1', None, None, '1',  None]
pr1d1c1 = 0 
for j1 in range(2): 
    for j2 in range(2): 
        for j3 in range(2): 
            pr1d1c1 += model.probability([['1',  '1', str(j2), str(j1),'1', str(j3)]])
print("P(r1,d1,c1): %s\n"%(pr1d1c1))

#### P(d1,c1)
query = ['1', None, None, None,  '1',  None]
pd1c1 = 0 
for j1 in range(2): 
    for j2 in range(2): 
        for j3 in range(2): 
            for j4 in range(2): 
                pd1c1 += model.probability([['1',  str(j2), str(j3), str(j1),'1', str(j4)]])
print("P(d1,c1): %s\n"%(pd1c1))

#### P(r1|d1,c1)
print("P(r1|d1,c1)): %s\n"%(pr1d1c1/pd1c1))



#### P(r1,d1,a0)
query = [None, '1', None, '0', '1',  None]
pr1d1a0 = 0 
for j1 in range(2): 
    for j2 in range(2): 
        for j3 in range(2): 
            pr1d1a0 += model.probability([[str(j1), '1', str(j2), '0', '1', str(j3)]])
print("P(r1,d1,a0): %s\n"%(pr1d1a0))

#### P(r1,d1,a1)
query = [None, '1', None, '1', '1',  None]
pr1d1a1 = 0 
for j1 in range(2): 
    for j2 in range(2): 
        for j3 in range(2): 
            pr1d1a1 += model.probability([[str(j1), '1', str(j2), '1', '1', str(j3)]])
print("P(r1,d1,a1): %s\n"%(pr1d1a1))

#### P(d1,a0)
query = [None, None, None, '0',  '1',  None]
pd1a0 = 0 
for j1 in range(2): 
    for j2 in range(2): 
        for j3 in range(2): 
            for j4 in range(2): 
                pd1a0 += model.probability([[str(j1), str(j2), str(j3), '0', '1', str(j4)]])
print("P(d1,a0): %s\n"%(pd1a0))

#### P(d1,a1)
query = [None, None, None, '1',  '1',  None]
pd1a1 = 0 
for j1 in range(2): 
    for j2 in range(2): 
        for j3 in range(2): 
            for j4 in range(2): 
                pd1a1 += model.probability([[str(j1), str(j2), str(j3), '1', '1', str(j4)]])
print("P(d1,a1): %s\n"%(pd1a1))


#### P(r1|d1,a0)
print("P(r1|d1,a0)): %s\n"%(pr1d1a0/pd1a0))

#### P(r1|d1,a1)
print("P(r1|d1,a1)): %s\n"%(pr1d1a1/pd1a1))



